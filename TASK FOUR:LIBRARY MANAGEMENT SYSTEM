import datetime

class LibraryItem:
    def __init__(self, title, author, category, item_id):
        self.title = title
        self.author = author
        self.category = category
        self.item_id = item_id
        self.is_available = True
        self.due_date = None
        self.borrower = None

    def check_out(self, borrower, due_date):
        if self.is_available:
            self.is_available = False
            self.due_date = due_date
            self.borrower = borrower
            print(f"{self.title} checked out by {borrower} until {due_date.strftime('%Y-%m-%d')}")
        else:
            print(f"{self.title} is currently unavailable.")

    def return_item(self):
        if not self.is_available:
            self.is_available = True
            self.due_date = None
            borrower = self.borrower
            self.borrower = None
            print(f"{self.title} returned by {borrower}")
            return self.calculate_overdue_fine()
        else:
            print(f"{self.title} is not currently checked out.")
            return 0

    def calculate_overdue_fine(self):
        if self.due_date and self.due_date < datetime.date.today():
            overdue_days = (datetime.date.today() - self.due_date).days
            fine = overdue_days * 0.5  # $0.50 per day
            print(f"Overdue fine for {self.title}: ${fine:.2f}")
            return fine
        return 0

    def __str__(self):
        return f"Title: {self.title}, Author: {self.author}, Category: {self.category}, ID: {self.item_id}, Available: {self.is_available}"


class Book(LibraryItem):
    def __init__(self, title, author, isbn, item_id):
        super().__init__(title, author, "Book", item_id)
        self.isbn = isbn

class Magazine(LibraryItem):
    def __init__(self, title, issue_number, item_id):
        super().__init__(title, None, "Magazine", item_id)  
        self.issue_number = issue_number

class DVD(LibraryItem):
    def __init__(self, title, director, item_id):
        super().__init__(title, director, "DVD", item_id)
        self.director = director

class Library:
    def __init__(self):
        self.items = []
        self.next_item_id = 1

    def add_item(self, item):
        item.item_id = self.next_item_id
        self.items.append(item)
        self.next_item_id += 1
        print(f"{item.title} added to the library.")

    def search_item(self, query, search_by="title"):
        results = []
        for item in self.items:
            if search_by == "title" and query.lower() in item.title.lower():
                results.append(item)
            elif search_by == "author" and item.author and query.lower() in item.author.lower():
                results.append(item)
            elif search_by == "category" and query.lower() in item.category.lower():
                results.append(item)
        return results

    def check_out_item(self, item_id, borrower, due_date):
        for item in self.items:
            if item.item_id == item_id:
                item.check_out(borrower, due_date)
                return
        print(f"Item with ID {item_id} not found.")

    def return_item(self, item_id):
        for item in self.items:
            if item.item_id == item_id:
                item.return_item()
                return
        print(f"Item with id {item_id} not found.")

#example

library = Library()

library.add_item(Book("The Lord of the Rings", "J.R.R. Tolkien", "978-0547928227", 1))
library.add_item(Magazine("National Geographic", "12/2023", 2))
library.add_item(DVD("Inception", "Christopher Nolan",3))

library.check_out_item(1, "Alice", datetime.date(2024, 1, 15))
library.return_item(1)

results = library.search_item("Lord", search_by="title")
for result in results:
  result
##
